#!/usr/bin/env python3
"""
Generates plots / figures when run as a script.
Plot files are placed in the :file:`plots` directory.

By default, simply running ``python -m src.plots`` generates **ALL** plots,
which may not be desired.  Instead, one can pass a list of plots to generate:
``python -m src.plots plot1 plot2 ...``.  The full list of plots is shown in
the usage information ``python -m src.plots --help``.

Typing can be reduced by using shell brace expansion, e.g. ``python -m
src.plots observables_{design,posterior}`` for both ``observables_design`` and
``observables_posterior``.  In addition, plots may be given as paths to plot
filenames, which enables shell globbing, e.g. ``python -m src.plots
plots/observables_*``.

In the code, each plot is generated by a function tagged with the ``@plot``
decorator.
"""

import copy
import itertools
import logging
import warnings
from collections import OrderedDict
from pathlib import Path

import dill
#import hsluv
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
#import plotly.graph_objects as go
import seaborn as sns
from matplotlib import lines, patches, ticker
#matplotlib.use('TkAgg')
#from plotly.subplots import make_subplots
#from SALib.analyze import sobol
#from SALib.sample import saltelli
from scipy import optimize, stats
from scipy.interpolate import PchipInterpolator

#from bayes_exp import Y_exp_data
from bayes_mcmc import *
#from calculations_load import MAP_data, trimmed_model_data
#from compare_events import model_data_1, model_data_2
from configurations import *
#from design import Design
#from emulator import Trained_Emulators
#from mcmc_diagnostics import autocorrelation
#from priors import *

from emulator import *
#from bayes_exp import Y_exp_data
from calculations_load import trimmed_model_data, validation_data
import random

logging.getLogger().setLevel(logging.INFO)
print("Plotting parameter samples drawn from posterior")

# Set the chain to be read   # -300w-800b-15000s_remove_extra_1        # -300w-1000b-1000s-AuAu-nominal
chain = Chain(path=workdir / "mcmc" / "chain-idf-0.hdf")   #<----------------------------------# set chain
#Ymodel = chain.samples(500)

# Read parameter data into numpy array and then convert into pandas dataframe
data = chain.load_wo_reshape()
data = data.reshape(-1, 20)

#test_data = data[0].reshape(-1, 1)
dataframe = pd.DataFrame.from_records(data)
#print(dataframe.iloc[70000,parameters_to_plot])

# Load emulators
#emu = dill.load(
    #open("emulator/emulator-" + 'd-Au-200' + "-idf-" + str(idf) + ".dill", "rb")
#)

#test_emu = emu.predict(np.array([data[0]]), return_cov=False)

steps_max = 20000
n_last_1000 = np.array([])
# Set the number of total samples and draw 1000 of them randomly
n_samples_posterior = steps_max*300  #600000

last_1000 = np.array(range(steps_max-1000,steps_max))
for i in range(300):                           #<----------------------------------# set number of samples in chain
    n_last_1000 = np.concatenate((n_last_1000,last_1000))
    last_1000=last_1000+steps_max
n_last_1000 = np.array(n_last_1000)
print(n_last_1000)


sample__ = random.sample(list(n_last_1000), 10000)
sample__ = list(sample__)
# Set the pruning rate for discarding samples when plotting
prune = 200   #60                                            #<----------------------------------# set prune for discarding rate

# Set saved picture extentions
mcmc_run_settings = '_nominal_300w_20000b_20000s_60k_sample_fixed_length_scale_bug'                       #<----------------------------------# set MCMC settings to string for saved pictures


# Latex labels dictionary
param_dict = {
       'ylossParam4At2' : '$y_{loss}$ at 2',
       'ylossParam4At4' : '$y_{loss}$ at 4',
       'ylossParam4At6' : '$y_{loss}$ at 6',
       'ylossParam4var': '$y_{loss}$ Var',
       'remnant_energy_loss_fraction' : 'Remnant E loss Frac.',
       'shadowing_factor' : 'Shadowing Factor',
       'tau_form_mean' : r'$\tau_{form}$ Mean',
       'BG' : 'BG',
       'string_source_sigma_x' : 'String Source $\sigma_x$',
       'string_source_sigma_eta': 'String Source $\sigma_\eta$',
       'stringTransverseShiftFrac' : 'String Trans. Shift Frac.',
       'shear_viscosity_3_eta_over_s_T_kink_in_GeV': r'$\frac{\eta}{s}$ $T_{kink}$',
       'shear_viscosity_3_eta_over_s_low_T_slope_in_GeV' : r'$\frac{\eta}{s}$ low-T slope',
       'shear_viscosity_3_eta_over_s_high_T_slope_in_GeV' : r'$\frac{\eta}{s}$ high-T slope',
       'shear_viscosity_3_eta_over_s_at_kink' : r'$\frac{\eta}{s}$ at kink',
       'bulk_viscosity_3_zeta_over_s_max' : r'$\frac{\zeta}{s}$ max',
       'bulk_viscosity_3_zeta_over_s_T_peak_in_GeV' : r'$\frac{\zeta}{s}$ $T_{peak}$',
       'bulk_viscosity_3_zeta_over_s_width_in_GeV' : r'$\frac{\zeta}{s}$ width',
       'bulk_viscosity_3_zeta_over_s_lambda_asymm' : r'$\frac{\zeta}{s}$ $\lambda$ assym.',
       'eps_switch' : 'EPS Switch'}

def combine_code_dataframes(samples_df1,samples_df2):
    # hues
    df1 = ["Andi"]; df2 = ["Matt"]
    df1 = df1*len(samples_df1); df2 = df2*len(samples_df2)
    print(len(samples_df1), len(samples_df2))
    df_combined = df1+df2

    # samples
    samples_df_separate = [samples_df1, samples_df2]
    samples_df_combined = pd.concat(samples_df_separate)

    # add hues to samples dataframe
    samples_df_combined["code"] = df_combined
    return samples_df_combined


combine_code_dfs = False
if combine_code_dfs:
    dataframe_Andi = pd.read_csv('./Andi_runs/JETSCAPE_bayes_with_flow_ptemcee_20_obs_20_temps_300_1000_1000', index_col=0)
    dataframe_Andi = dataframe_Andi.iloc[0:300000:10,:]
    dataframe_Matt = dataframe.iloc[0:6000000:200,:] #0:n_samples_posterior:10
    param_lbls = ['ylossParam4At2', 'ylossParam4At4', 'ylossParam4At6', 'ylossParam4var', 'remnant_energy_loss_fraction', 'shadowing_factor', 'tau_form_mean','BG', 'string_source_sigma_x', 'string_source_sigma_eta', 'stringTransverseShiftFrac', 'shear_viscosity_3_eta_over_s_T_kink_in_GeV', 'shear_viscosity_3_eta_over_s_low_T_slope_in_GeV', 'shear_viscosity_3_eta_over_s_high_T_slope_in_GeV', 'shear_viscosity_3_eta_over_s_at_kink', 'bulk_viscosity_3_zeta_over_s_max', 'bulk_viscosity_3_zeta_over_s_T_peak_in_GeV', 'bulk_viscosity_3_zeta_over_s_width_in_GeV', 'bulk_viscosity_3_zeta_over_s_lambda_asymm', 'eps_switch']
    for i in range(dataframe_Matt.shape[1]):
        dataframe_Matt.rename({i:str(param_lbls[i])}, axis=1, inplace=True)
    df_dict = {}
    for i in range(dataframe_Matt.shape[0]):
        df_dict[10*i] = i
    dataframe_Matt.rename(df_dict, axis=0, inplace=True)

    samples_df_combined = combine_code_dataframes(dataframe_Andi,dataframe_Matt)
#print(dataframe_Andi)
#print(dataframe_Matt)
#print(samples_df_combined)
#print(samples_df_combined["code"])

#print(dataframe_Matt.columns)



# Load the emulators
emu_dict = {}
for s in system_strs: #system_strs:
    # load the dill'ed emulator from emulator file
    print(
        "Loading emulators from emulator/emulator-"
        + s
        + "-idf-"
        + str(idf)
        + ".dill"
    )
    emu_dict[s] = dill.load(
        open("emulator/emulator-" + s + "-idf-" + str(idf) + ".dill", "rb") #-21-bins-10pc
    )
    #emu = dill.load(
        #open("emulator/emulator-" + s + "-idf-" + str(idf) + ".dill", "rb")
    #)
    print("NPC = " + str(emu_dict[s].npc))

design, design_max, design_min, labels = load_design(s, pset="validation")
print("Validation design set shape : (Npoints, Nparams) =  ", design.shape)

"""
# average covariance matrix over validation set
test_cov = 0
n = len(design)
for test_pt in range(n):
    params = design.iloc[test_pt].values
    mean, cov = emu_dict['Au-Au-200'].predict(np.array([params]), return_cov=True)
    test_cov += cov['v22','v22'][0]
test_cov = test_cov/n
"""
"""
slices = {}
for s in system_strs:
    nobs = 0
    slices[s] = []

    for obs in active_obs_list[s]:
        mean, cov = emu_dict[s].predict(np.array([design.iloc[0].values]), return_cov=True)
        mean = mean[obs].flatten();
        cov[obs,obs][0]
        obsdata = Yexp[s][obs]["mean"]
        except KeyError:
            continue

        n = obsdata.size

        self._slices[s].append((obs, slice(nobs, nobs + n)))
        nobs += n
"""
#"""
#test_pt = 0
#params = design.iloc[test_pt].values
#print(params)
#mean, cov = emu_dict['Au-Au-200'].predict(np.array([params]), return_cov=True)

#['dNch_deta_cen_00_05','dNch_deta_cen_00_05']
#test_cov = cov['dNch_deta_cen_00_05','dNch_deta_cen_40_50'][0]#[0] #predict_observables(model_params[test_pt])[1]
"""
#print(test_cov)
side3 = (np.linspace(-3.9, 3.9, 22))
X3,Y3 = np.meshgrid(side3, side3);
Z3 = test_cov
Z3_diag = np.diagflat(np.diag(test_cov))

fig, ax = plt.subplots(1, 1)
a = ax.pcolormesh(X3, Y3, Z3, shading='auto', cmap='summer')
fig.colorbar(a, ax=ax, extend='both')

ax.yaxis.set_ticks_position('both')
ax.xaxis.set_ticks_position('both')

ax.set_xticks([])
tick_labels = [-4.0,4.0]
tick_positions = [-4.0,4.0]
plt.xticks(tick_positions, tick_labels, fontsize =13)
plt.yticks(tick_positions, tick_labels, fontsize =13)

plt.xlim(-3.1,3.1)
plt.ylim(-3.1,3.1)

plt.text(.04, .93, 'val. pt. avg', ha='left', va='top', transform=ax.transAxes, fontsize = 16, family = "serif")
plt.text(.04, .85, 'Matt', ha='left', va='top', transform=ax.transAxes, fontsize = 16, family = "serif")


plt.xlabel('$\eta$ bin (20-70 % cent.)', fontsize = 13)
plt.ylabel('$\eta$ bin (20-70 % cent.)', fontsize = 13)
plt.title('AuAu $v_2$ emu. covariance matrix', fontsize = 12)
plt.savefig('Plots/Covariance_matrix' + mcmc_run_settings)
plt.show()
"""

Andi_test_cov = np.array([[0.00319224, 0.00328269, 0.00346543, 0.00371476, 0.00399342,
        0.00426093, 0.00448506, 0.00464596, 0.00474221, 0.00478576,
        0.0047878 , 0.00474867, 0.00465692, 0.00450079, 0.00427948,
        0.00400998, 0.00372768, 0.00347257, 0.00328323, 0.00318586],
       [0.00352568, 0.00387964, 0.00426463, 0.0046564 , 0.00502711,
        0.00534967, 0.00560584, 0.00578626, 0.00589533, 0.00594515,
        0.00594706, 0.00590142, 0.00579708, 0.00562138, 0.00536842,
        0.00504462, 0.00467103, 0.00427423, 0.00388309, 0.00352288],
       [0.00379277, 0.00436438, 0.00492443, 0.0054502 , 0.00592057,
        0.00631688, 0.00662882, 0.00685167, 0.00699114, 0.00705685,
        0.00705877, 0.00699729, 0.00686285, 0.0066448 , 0.00633645,
        0.00593956, 0.00546704, 0.00493692, 0.00437125, 0.00379411],
       [0.0040119 , 0.00475746, 0.00546432, 0.00611189, 0.00668402,
        0.00716671, 0.00755266, 0.00783673, 0.00802167, 0.00811175,
        0.0081138 , 0.00802822, 0.00784863, 0.00756948, 0.00718744,
        0.00670468, 0.0061311 , 0.00547981, 0.00476792, 0.00401764],
       [0.00420116, 0.00507984, 0.00590403, 0.00665654, 0.00732568,
        0.00789969, 0.00837075, 0.00872912, 0.00897078, 0.00909182,
        0.00909407, 0.00897804, 0.00874203, 0.00838867, 0.00792173,
        0.00734799, 0.0066781 , 0.00592245, 0.00509392, 0.0042114 ],
       [0.00436873, 0.00535042, 0.00626761, 0.00710762, 0.00786334,
        0.00852453, 0.00908156, 0.00951804, 0.00982094, 0.00997596,
        0.00997847, 0.00982906, 0.00953207, 0.00910057, 0.00854775,
        0.00788704, 0.00713128, 0.00628877, 0.00536802, 0.00438349],
       [0.00451791, 0.00558284, 0.00657368, 0.0074829 , 0.00830866,
        0.00904306, 0.00967567, 0.01018376, 0.01054474, 0.0107327 ,
        0.01073547, 0.01055374, 0.01019884, 0.00969553, 0.00906707,
        0.00833323, 0.00750813, 0.00659703, 0.00560347, 0.00453678],
       [0.00464244, 0.00577579, 0.00682415, 0.00778478, 0.00866135,
        0.00944944, 0.01013981, 0.01070519, 0.01111458, 0.01133071,
        0.01133372, 0.0111244 , 0.01072121, 0.01016026, 0.0094739 ,
        0.00868637, 0.00781105, 0.00684914, 0.00579887, 0.00466479],
       [0.00473174, 0.00591854, 0.00700832, 0.00800197, 0.00890815,
        0.0097266 , 0.01045128, 0.01105308, 0.01149517, 0.01173104,
        0.01173424, 0.01150566, 0.01106984, 0.0104721 , 0.00975127,
        0.00893332, 0.00802889, 0.00703444, 0.0059434 , 0.00475672],
       [0.00477496, 0.00599241, 0.00710424, 0.00811316, 0.00903082,
        0.00986007, 0.01059778, 0.01121483, 0.01167175, 0.01191695,
        0.01192025, 0.0116826 , 0.01123199, 0.01061874, 0.00988477,
        0.009056  , 0.00814037, 0.00713097, 0.00601825, 0.00480141],
       [0.00477474, 0.00599382, 0.0071064 , 0.00811518, 0.00903195,
        0.00985984, 0.01059614, 0.01121204, 0.01166826, 0.01191314,
        0.01191644, 0.01167912, 0.01122922, 0.01061711, 0.00988455,
        0.00905713, 0.00814239, 0.00713312, 0.00601965, 0.0048012 ],
       [0.00473243, 0.00592315, 0.00701404, 0.00800608, 0.00890851,
        0.00972207, 0.01044195, 0.01103996, 0.01147972, 0.01171453,
        0.01171774, 0.01149025, 0.01105678, 0.01046279, 0.00974675,
        0.00893371, 0.00803305, 0.00704026, 0.00594812, 0.00475757],
       [0.0046454 , 0.00578532, 0.00683571, 0.00779397, 0.0086647 ,
        0.009445  , 0.01012769, 0.01068699, 0.01109262, 0.01130705,
        0.01131007, 0.01110249, 0.01070307, 0.01014813, 0.00946944,
        0.00868969, 0.00782027, 0.00686078, 0.0058085 , 0.00466791],
       [0.00452051, 0.00559313, 0.00658687, 0.0074942 , 0.00831418,
        0.00904053, 0.009665  , 0.01016652, 0.01052334, 0.01070938,
        0.01071216, 0.01053237, 0.01018164, 0.00968483, 0.0090645 ,
        0.0083387 , 0.00751939, 0.00661022, 0.00561378, 0.00453944],
       [0.0043733 , 0.00536421, 0.00628489, 0.00712273, 0.00787166,
        0.0085234 , 0.00907086, 0.00949964, 0.00979768, 0.00995046,
        0.00995297, 0.00980582, 0.00951371, 0.00908983, 0.00854655,
        0.00789528, 0.00714633, 0.00630604, 0.00538181, 0.00438812],
       [0.00420635, 0.00509516, 0.00592287, 0.00667238, 0.00733327,
        0.00789601, 0.00835578, 0.00870507, 0.00894101, 0.00905942,
        0.00906169, 0.00894833, 0.00871808, 0.00837371, 0.00791806,
        0.00735559, 0.006694  , 0.00594143, 0.00510941, 0.00421684],
       [0.00401783, 0.00477348, 0.00548402, 0.00612896, 0.00669338,
        0.0071654 , 0.00754059, 0.00781596, 0.00799539, 0.00808293,
        0.00808497, 0.00800198, 0.00782793, 0.00755739, 0.00718609,
        0.00671397, 0.00614813, 0.0054995 , 0.00478394, 0.00402363],
       [0.00379887, 0.00438009, 0.00494403, 0.00546804, 0.00593208,
        0.00631936, 0.00662204, 0.00683735, 0.006972  , 0.00703546,
        0.00703737, 0.00697813, 0.00684851, 0.00663791, 0.00633877,
        0.00595088, 0.00548469, 0.00495634, 0.00438678, 0.00380008],
       [0.00353231, 0.00389316, 0.00428088, 0.00467136, 0.00503758,
        0.00535379, 0.00560348, 0.00577863, 0.00588432, 0.00593257,
        0.00593447, 0.0058904 , 0.00578943, 0.00561893, 0.00537241,
        0.00505493, 0.00468581, 0.00429029, 0.00389643, 0.00352934],
       [0.00320286, 0.00329868, 0.00348325, 0.00373118, 0.00400602,
        0.00426845, 0.00448756, 0.00464447, 0.00473823, 0.00478064,
        0.00478266, 0.00474466, 0.00465539, 0.00450317, 0.00428683,
        0.00402238, 0.00374389, 0.00349018, 0.00329902, 0.00319628]])

Andi_test_cov_avg = np.array([[5.61134205e-06, 5.72923077e-06, 5.72409749e-06, 5.59787091e-06,
  5.37711640e-06, 5.13281296e-06, 4.73728255e-06, 4.81607961e-06,
  4.85620576e-06, 4.88196432e-06, 4.87763355e-06, 4.85002646e-06,
  4.80967096e-06, 4.73521931e-06, 4.64265438e-06, 4.77005132e-06,
  5.00844319e-06, 5.21032077e-06, 5.34735933e-06, 5.35783098e-06,
  5.22759619e-06],
 [5.72923077e-06, 6.22835206e-06, 6.49547069e-06, 6.61682701e-06,
  6.63639027e-06, 6.56534549e-06, 6.70871247e-06, 6.83109497e-06,
  6.90404373e-06, 6.95172343e-06, 6.95819165e-06, 6.92009897e-06,
  6.85829864e-06, 6.74330005e-06, 6.61396220e-06, 6.20999835e-06,
  6.26186307e-06, 6.24232099e-06, 6.11607923e-06, 5.82512477e-06,
  5.38054138e-06],
 [5.72409749e-06, 6.49547069e-06, 7.14192054e-06, 7.55095370e-06,
  7.83324310e-06, 7.96765284e-06, 8.72526847e-06, 8.89379872e-06,
  9.00060841e-06, 9.07695067e-06, 9.08766967e-06, 9.04712326e-06,
  8.97039336e-06, 8.83045982e-06, 8.65650284e-06, 7.60069555e-06,
  7.44519609e-06, 7.16352086e-06, 6.73695151e-06, 6.13816237e-06,
  5.38384251e-06],
 [5.59787091e-06, 6.61682701e-06, 7.55095370e-06, 8.28675253e-06,
  8.85667283e-06, 9.25543023e-06, 1.07459639e-05, 1.09377067e-05,
  1.10672181e-05, 1.11578595e-05, 1.11655548e-05, 1.11166883e-05,
  1.10191849e-05, 1.08508502e-05, 1.06461851e-05, 8.88492964e-06,
  8.47567459e-06, 7.90113971e-06, 7.18496837e-06, 6.27222208e-06,
  5.24931046e-06],
 [5.37711640e-06, 6.63639027e-06, 7.83324310e-06, 8.85667283e-06,
  9.74466823e-06, 1.04420117e-05, 1.28131079e-05, 1.30104870e-05,
  1.31442633e-05, 1.32430181e-05, 1.32513841e-05, 1.31993830e-05,
  1.30932512e-05, 1.29177275e-05, 1.27128353e-05, 1.00490438e-05,
  9.33766902e-06, 8.45084024e-06, 7.44103038e-06, 6.26401410e-06,
  5.02949549e-06],
 [5.13281296e-06, 6.56534549e-06, 7.96765284e-06, 9.25543023e-06,
  1.04420117e-05, 1.14458301e-05, 1.48216771e-05, 1.50037864e-05,
  1.51243343e-05, 1.52183579e-05, 1.52222037e-05, 1.51711324e-05,
  1.50662028e-05, 1.49009088e-05, 1.47148464e-05, 1.10363398e-05,
  1.00192309e-05, 8.83050074e-06, 7.55862858e-06, 6.15976367e-06,
  4.76173211e-06],
 [4.73728255e-06, 6.70871247e-06, 8.72526847e-06, 1.07459639e-05,
  1.28131079e-05, 1.48216771e-05, 3.03500513e-05, 3.11597950e-05,
  3.17161964e-05, 3.20657740e-05, 3.21369965e-05, 3.20231569e-05,
  3.16978186e-05, 3.10980601e-05, 3.03018696e-05, 1.46448725e-05,
  1.26438419e-05, 1.05736234e-05, 8.56858590e-06, 6.51579287e-06,
  4.56765774e-06],
 [4.81607961e-06, 6.83109497e-06, 8.89379872e-06, 1.09377067e-05,
  1.30104870e-05, 1.50037864e-05, 3.11597950e-05, 3.21174454e-05,
  3.27954878e-05, 3.32207864e-05, 3.33178246e-05, 3.31833324e-05,
  3.27899942e-05, 3.20741380e-05, 3.11357434e-05, 1.49027126e-05,
  1.29103664e-05, 1.08372011e-05, 8.79846588e-06, 6.71007461e-06,
  4.70050248e-06],
 [4.85620576e-06, 6.90404373e-06, 9.00060841e-06, 1.10672181e-05,
  1.31442633e-05, 1.51243343e-05, 3.17161964e-05, 3.27954878e-05,
  3.35762627e-05, 3.40649161e-05, 3.41841871e-05, 3.40324323e-05,
  3.35820368e-05, 3.27691620e-05, 3.17139797e-05, 1.51066020e-05,
  1.31223806e-05, 1.10469825e-05, 8.97969613e-06, 6.85741449e-06,
  4.80159971e-06],
 [4.88196432e-06, 6.95172343e-06, 9.07695067e-06, 1.11578595e-05,
  1.32430181e-05, 1.52183579e-05, 3.20657740e-05, 3.32207864e-05,
  3.40649161e-05, 3.45939922e-05, 3.47273576e-05, 3.45650921e-05,
  3.40792461e-05, 3.32070970e-05, 3.20806208e-05, 1.52468638e-05,
  1.32630142e-05, 1.11817160e-05, 9.09134924e-06, 6.95188398e-06,
  4.86372376e-06],
 [4.87763355e-06, 6.95819165e-06, 9.08766967e-06, 1.11655548e-05,
  1.32513841e-05, 1.52222037e-05, 3.21369965e-05, 3.33178246e-05,
  3.41841871e-05, 3.47273576e-05, 3.48678890e-05, 3.47033352e-05,
  3.42071281e-05, 3.33166087e-05, 3.21685451e-05, 1.52852385e-05,
  1.33006467e-05, 1.12195996e-05, 9.12074195e-06, 6.97625048e-06,
  4.88079509e-06],
 [4.85002646e-06, 6.92009897e-06, 9.04712326e-06, 1.11166883e-05,
  1.31993830e-05, 1.51711324e-05, 3.20231569e-05, 3.31833324e-05,
  3.40324323e-05, 3.45650921e-05, 3.47033352e-05, 3.45440814e-05,
  3.40606911e-05, 3.31906084e-05, 3.20646121e-05, 1.52441318e-05,
  1.32572697e-05, 1.11768939e-05, 9.07974952e-06, 6.94146026e-06,
  4.85219975e-06],
 [4.80967096e-06, 6.85829864e-06, 8.97039336e-06, 1.10191849e-05,
  1.30932512e-05, 1.50662028e-05, 3.16978186e-05, 3.27899942e-05,
  3.35820368e-05, 3.40792461e-05, 3.42071281e-05, 3.40606911e-05,
  3.36142382e-05, 3.28036215e-05, 3.17457263e-05, 1.51321241e-05,
  1.31447047e-05, 1.10708764e-05, 8.98913007e-06, 6.86869956e-06,
  4.80503730e-06],
 [4.73521931e-06, 6.74330005e-06, 8.83045982e-06, 1.08508502e-05,
  1.29177275e-05, 1.49009088e-05, 3.10980601e-05, 3.20741380e-05,
  3.27691620e-05, 3.32070970e-05, 3.33166087e-05, 3.31906084e-05,
  3.28036215e-05, 3.20921844e-05, 3.11500386e-05, 1.49340908e-05,
  1.29376051e-05, 1.08660812e-05, 8.80501327e-06, 6.71814962e-06,
  4.69623960e-06],
 [4.64265438e-06, 6.61396220e-06, 8.65650284e-06, 1.06461851e-05,
  1.27128353e-05, 1.47148464e-05, 3.03018696e-05, 3.11357434e-05,
  3.17139797e-05, 3.20806208e-05, 3.21685451e-05, 3.20646121e-05,
  3.17457263e-05, 3.11500386e-05, 3.03504858e-05, 1.47075705e-05,
  1.26932220e-05, 1.06204862e-05, 8.58365521e-06, 6.53944354e-06,
  4.57261671e-06],
 [4.77005132e-06, 6.20999835e-06, 7.60069555e-06, 8.88492964e-06,
  1.00490438e-05, 1.10363398e-05, 1.46448725e-05, 1.49027126e-05,
  1.51066020e-05, 1.52468638e-05, 1.52852385e-05, 1.52441318e-05,
  1.51321241e-05, 1.49340908e-05, 1.47075705e-05, 1.12539007e-05,
  1.02433534e-05, 9.07370417e-06, 7.75746019e-06, 6.34430947e-06,
  4.85652935e-06],
 [5.00844319e-06, 6.26186307e-06, 7.44519609e-06, 8.47567459e-06,
  9.33766902e-06, 1.00192309e-05, 1.26438419e-05, 1.29103664e-05,
  1.31223806e-05, 1.32630142e-05, 1.33006467e-05, 1.32572697e-05,
  1.31447047e-05, 1.29376051e-05, 1.26932220e-05, 1.02433534e-05,
  9.54724261e-06, 8.68373034e-06, 7.64039561e-06, 6.45009091e-06,
  5.12923252e-06],
 [5.21032077e-06, 6.24232099e-06, 7.16352086e-06, 7.90113971e-06,
  8.45084024e-06, 8.83050074e-06, 1.05736234e-05, 1.08372011e-05,
  1.10469825e-05, 1.11817160e-05, 1.12195996e-05, 1.11768939e-05,
  1.10708764e-05, 1.08660812e-05, 1.06204862e-05, 9.07370417e-06,
  8.68373034e-06, 8.13827371e-06, 7.39369544e-06, 6.47318817e-06,
  5.37350318e-06],
 [5.34735933e-06, 6.11607923e-06, 6.73695151e-06, 7.18496837e-06,
  7.44103038e-06, 7.55862858e-06, 8.56858590e-06, 8.79846588e-06,
  8.97969613e-06, 9.09134924e-06, 9.12074195e-06, 9.07974952e-06,
  8.98913007e-06, 8.80501327e-06, 8.58365521e-06, 7.75746019e-06,
  7.64039561e-06, 7.39369544e-06, 6.96204534e-06, 6.33292876e-06,
  5.51256579e-06],
 [5.35783098e-06, 5.82512477e-06, 6.13816237e-06, 6.27222208e-06,
  6.26401410e-06, 6.15976367e-06, 6.51579287e-06, 6.71007461e-06,
  6.85741449e-06, 6.95188398e-06, 6.97625048e-06, 6.94146026e-06,
  6.86869956e-06, 6.71814962e-06, 6.53944354e-06, 6.34430947e-06,
  6.45009091e-06, 6.47318817e-06, 6.33292876e-06, 6.07774792e-06,
  5.53327870e-06],
 [5.22759619e-06, 5.38054138e-06, 5.38384251e-06, 5.24931046e-06,
  5.02949549e-06, 4.76173211e-06, 4.56765774e-06, 4.70050248e-06,
  4.80159971e-06, 4.86372376e-06, 4.88079509e-06, 4.85219975e-06,
  4.80503730e-06, 4.69623960e-06, 4.57261671e-06, 4.85652935e-06,
  5.12923252e-06, 5.37350318e-06, 5.51256579e-06, 5.53327870e-06,
  5.39856988e-06]])

Andi_test_cov_avg_ptp_scipy = np.array([[7.38386096e-06, 7.46510976e-06, 7.31017444e-06, 6.94382492e-06,
  6.45656985e-06, 5.94194824e-06, 5.77473948e-06, 5.96651284e-06,
  6.09636276e-06, 6.16865213e-06, 6.18208382e-06, 6.13895746e-06,
  6.06120796e-06, 5.90017290e-06, 5.70145483e-06, 5.76365676e-06,
  6.28490105e-06, 6.77190303e-06, 7.15168674e-06, 7.34574038e-06,
  7.26455552e-06],
 [7.46510976e-06, 7.85374744e-06, 8.01381888e-06, 7.93800325e-06,
  7.69232851e-06, 7.34417191e-06, 6.40641967e-06, 6.54980115e-06,
  6.64943094e-06, 6.70798727e-06, 6.71712832e-06, 6.67944927e-06,
  6.61716799e-06, 6.49009095e-06, 6.34088379e-06, 7.18884759e-06,
  7.53541528e-06, 7.78299247e-06, 7.86721758e-06, 7.74010263e-06,
  7.33805229e-06],
 [7.31017444e-06, 8.01381888e-06, 8.51130289e-06, 8.75765625e-06,
  8.79400736e-06, 8.65502026e-06, 7.06586795e-06, 7.15533730e-06,
  7.22135698e-06, 7.26536708e-06, 7.26962320e-06, 7.23901375e-06,
  7.19474112e-06, 7.10700135e-06, 7.01468239e-06, 8.52808977e-06,
  8.65600564e-06, 8.62421390e-06, 8.38045594e-06, 7.90927399e-06,
  7.17906310e-06],
 [6.94382492e-06, 7.93800325e-06, 8.75765625e-06, 9.33221253e-06,
  9.67703001e-06, 9.78794470e-06, 7.85129784e-06, 7.88100142e-06,
  7.90783502e-06, 7.93423256e-06, 7.93258818e-06, 7.90984678e-06,
  7.88559368e-06, 7.84210011e-06, 7.81217646e-06, 9.69135371e-06,
  9.56193303e-06, 9.22503411e-06, 8.64688230e-06, 7.84126395e-06,
  6.81515122e-06],
 [6.45656985e-06, 7.69232851e-06, 8.79400736e-06, 9.67703001e-06,
  1.03373892e-05, 1.07268178e-05, 8.83779039e-06, 8.80563135e-06,
  8.78975391e-06, 8.79688029e-06, 8.78808736e-06, 8.77381511e-06,
  8.77134745e-06, 8.77544503e-06, 8.81060837e-06, 1.06590760e-05,
  1.02462386e-05, 9.59850935e-06, 8.70560594e-06, 7.60263286e-06,
  6.33745806e-06],
 [5.94194824e-06, 7.34417191e-06, 8.65502026e-06, 9.78794470e-06,
  1.07268178e-05, 1.13856391e-05, 9.97758511e-06, 9.89775702e-06,
  9.84739203e-06, 9.83967664e-06, 9.82451168e-06, 9.81719749e-06,
  9.83226559e-06, 9.87458304e-06, 9.96151521e-06, 1.13414831e-05,
  1.06570918e-05, 9.73425302e-06, 8.58610961e-06, 7.25790137e-06,
  5.83468013e-06],
 [5.77473948e-06, 6.40641967e-06, 7.06586795e-06, 7.85129784e-06,
  8.83779039e-06, 9.97758511e-06, 2.47179649e-05, 2.55903009e-05,
  2.62048604e-05, 2.65920473e-05, 2.66842599e-05, 2.65562595e-05,
  2.62044726e-05, 2.55463786e-05, 2.46992852e-05, 9.87185472e-06,
  8.72819551e-06, 7.75380298e-06, 6.94658105e-06, 6.25690332e-06,
  5.70705575e-06],
 [5.96651284e-06, 6.54980115e-06, 7.15533730e-06, 7.88100142e-06,
  8.80563135e-06, 9.89775702e-06, 2.55903009e-05, 2.65701528e-05,
  2.72632537e-05, 2.76955477e-05, 2.78015263e-05, 2.76592793e-05,
  2.72649541e-05, 2.65248399e-05, 2.55703565e-05, 9.78207843e-06,
  8.68475133e-06, 7.77011319e-06, 7.02325534e-06, 6.39564699e-06,
  5.89103038e-06],
 [6.09636276e-06, 6.64943094e-06, 7.22135698e-06, 7.90783502e-06,
  8.78975391e-06, 9.84739203e-06, 2.62048604e-05, 2.72632537e-05,
  2.80140734e-05, 2.84795360e-05, 2.85957035e-05, 2.84431303e-05,
  2.80175936e-05, 2.72174339e-05, 2.61845781e-05, 9.72502781e-06,
  8.66078209e-06, 7.78720438e-06, 7.07992628e-06, 6.49222071e-06,
  6.01479789e-06],
 [6.16865213e-06, 6.70798727e-06, 7.26536708e-06, 7.93423256e-06,
  8.79688029e-06, 9.83967664e-06, 2.65920473e-05, 2.76955477e-05,
  2.84795360e-05, 2.89643738e-05, 2.90863876e-05, 2.89278634e-05,
  2.84845247e-05, 2.76500459e-05, 2.65725183e-05, 9.71351125e-06,
  8.66304214e-06, 7.80802154e-06, 7.11848884e-06, 6.54913627e-06,
  6.08350841e-06],
 [6.18208382e-06, 6.71712832e-06, 7.26962320e-06, 7.93258818e-06,
  8.78808736e-06, 9.82451168e-06, 2.66842599e-05, 2.78015263e-05,
  2.85957035e-05, 2.90863876e-05, 2.92103044e-05, 2.90499887e-05,
  2.86010999e-05, 2.77560237e-05, 2.66647363e-05, 9.69777708e-06,
  8.65333051e-06, 7.80519470e-06, 7.12160336e-06, 6.55795478e-06,
  6.09614268e-06],
 [6.13895746e-06, 6.67944927e-06, 7.23901375e-06, 7.90984678e-06,
  8.77381511e-06, 9.81719749e-06, 2.65562595e-05, 2.76592793e-05,
  2.84431303e-05, 2.89278634e-05, 2.90499887e-05, 2.88920018e-05,
  2.84490534e-05, 2.76152630e-05, 2.65386769e-05, 9.69436152e-06,
  8.64290066e-06, 7.78646871e-06, 7.09467325e-06, 6.52259112e-06,
  6.05540224e-06],
 [6.06120796e-06, 6.61716799e-06, 7.19474112e-06, 7.88559368e-06,
  8.77134745e-06, 9.83226559e-06, 2.62044726e-05, 2.72649541e-05,
  2.80175936e-05, 2.84845247e-05, 2.86010999e-05, 2.84490534e-05,
  2.80234971e-05, 2.72227583e-05, 2.61892240e-05, 9.71479351e-06,
  8.64623931e-06, 7.76891208e-06, 7.05668663e-06, 6.46365680e-06,
  5.98165160e-06],
 [5.90017290e-06, 6.49009095e-06, 7.10700135e-06, 7.84210011e-06,
  8.77544503e-06, 9.87458304e-06, 2.55463786e-05, 2.65248399e-05,
  2.72174339e-05, 2.76500459e-05, 2.77560237e-05, 2.76152630e-05,
  2.72227583e-05, 2.64853264e-05, 2.55343821e-05, 9.76697413e-06,
  8.66108560e-06, 7.73796506e-06, 6.98073415e-06, 6.34218053e-06,
  5.82819612e-06],
 [5.70145483e-06, 6.34088379e-06, 7.01468239e-06, 7.81217646e-06,
  8.81060837e-06, 9.96151521e-06, 2.46992852e-05, 2.55703565e-05,
  2.61845781e-05, 2.65725183e-05, 2.66647363e-05, 2.65386769e-05,
  2.61892240e-05, 2.55343821e-05, 2.46917655e-05, 9.86626112e-06,
  8.70939818e-06, 7.72320618e-06, 6.90270284e-06, 6.19917936e-06,
  5.63815691e-06],
 [5.76365676e-06, 7.18884759e-06, 8.52808977e-06, 9.69135371e-06,
  1.06590760e-05, 1.13414831e-05, 9.87185472e-06, 9.78207843e-06,
  9.72502781e-06, 9.71351125e-06, 9.69777708e-06, 9.69436152e-06,
  9.71479351e-06, 9.76697413e-06, 9.86626112e-06, 1.13195593e-05,
  1.06099322e-05, 9.65838756e-06, 8.47740556e-06, 7.11548103e-06,
  5.66739849e-06],
 [6.28490105e-06, 7.53541528e-06, 8.65600564e-06, 9.56193303e-06,
  1.02462386e-05, 1.06570918e-05, 8.72819551e-06, 8.68475133e-06,
  8.66078209e-06, 8.66304214e-06, 8.65333051e-06, 8.64290066e-06,
  8.64623931e-06, 8.66108560e-06, 8.70939818e-06, 1.06099322e-05,
  1.01748506e-05, 9.50330726e-06, 8.58522795e-06, 7.45751272e-06,
  6.17695569e-06],
 [6.77190303e-06, 7.78299247e-06, 8.62421390e-06, 9.22503411e-06,
  9.59850935e-06, 9.73425302e-06, 7.75380298e-06, 7.77011319e-06,
  7.78720438e-06, 7.80802154e-06, 7.80519470e-06, 7.78646871e-06,
  7.76891208e-06, 7.73796506e-06, 7.72320618e-06, 9.65838756e-06,
  9.50330726e-06, 9.13894905e-06, 8.53206051e-06, 7.69891603e-06,
  6.65573510e-06],
 [7.15168674e-06, 7.86721758e-06, 8.38045594e-06, 8.64688230e-06,
  8.70560594e-06, 8.58610961e-06, 6.94658105e-06, 7.02325534e-06,
  7.07992628e-06, 7.11848884e-06, 7.12160336e-06, 7.09467325e-06,
  7.05668663e-06, 6.98073415e-06, 6.90270284e-06, 8.47740556e-06,
  8.58522795e-06, 8.53206051e-06, 8.26615492e-06, 7.77383821e-06,
  7.03182625e-06],
 [7.34574038e-06, 7.74010263e-06, 7.90927399e-06, 7.84126395e-06,
  7.60263286e-06, 7.25790137e-06, 6.25690332e-06, 6.39564699e-06,
  6.49222071e-06, 6.54913627e-06, 6.55795478e-06, 6.52259112e-06,
  6.46365680e-06, 6.34218053e-06, 6.19917936e-06, 7.11548103e-06,
  7.45751272e-06, 7.69891603e-06, 7.77383821e-06, 7.63683356e-06,
  7.22604961e-06],
 [7.26455552e-06, 7.33805229e-06, 7.17906310e-06, 6.81515122e-06,
  6.33745806e-06, 5.83468013e-06, 5.70705575e-06, 5.89103038e-06,
  6.01479789e-06, 6.08350841e-06, 6.09614268e-06, 6.05540224e-06,
  5.98165160e-06, 5.82819612e-06, 5.63815691e-06, 5.66739849e-06,
  6.17695569e-06, 6.65573510e-06, 7.03182625e-06, 7.22604961e-06,
  7.15468235e-06]])
"""
#test_cov = cov['dNch_deta_cen_00_05','dNch_deta_cen_00_05'][0]#[0] #predict_observables(model_params[test_pt])[1]
#print(test_cov)
side3 = (np.linspace(-3.9, 3.9, 21))
X3,Y3 = np.meshgrid(side3, side3);
Z3 = (1 - test_cov/Andi_test_cov_avg_ptp_scipy )*100
Z3_diag = np.diagflat(np.diag(test_cov))

fig, ax = plt.subplots(1, 1)
a = ax.pcolormesh(X3, Y3, Z3, shading='auto', cmap='Greys')
fig.colorbar(a, ax=ax, extend='both')

ax.yaxis.set_ticks_position('both')
ax.xaxis.set_ticks_position('both')

ax.set_xticks([])
tick_labels = [-3.8,0,3.8]
tick_positions = [-3.8,0,3.8]
plt.xticks(tick_positions, tick_labels, fontsize =13)
plt.yticks(tick_positions, tick_labels, fontsize =13)

plt.xlim(-4.0,4.0)
plt.ylim(-4.0,4.0)

plt.text(.04, .93, 'val. pt. avg', ha='left', va='top', transform=ax.transAxes, color = 'white', fontsize = 16, family = "serif")
plt.text(.04, .85, '(1 - Matt/Andi) x 100%', ha='left', va='top', transform=ax.transAxes, color = 'white', fontsize = 16, family = "serif")


plt.xlabel('$\eta$ bin (0-5 % cent.)', fontsize = 13)
plt.ylabel('$\eta$ bin (40-50 % cent.)', fontsize = 13)
plt.title('AuAu $v_2$ emu. covariance matrix', fontsize = 12)
plt.savefig('Plots/Covariance_matrix_percent_diff' + mcmc_run_settings)
plt.show()
"""

#sns.pairplot(samples_df_combined,hue="code")
# Corner plot of key parameter posteriors
"""
# Shorter list to highlight select parameters in corner plot
#label_list = ['ylossParam4At2','ylossParam4At4','ylossParam4At6','bulk_viscosity_3_zeta_over_s_max','bulk_viscosity_3_zeta_over_s_T_peak_in_GeV']
parameters_to_plot=[0,1,2,15,16,20]
#parameters_to_plot=[11,12,13,14,20]
sns.color_palette("flare")
#g = sns.PairGrid(dataframe.iloc[random.sample(range(0,300000), 3000),parameters_to_plot], corner=True, diag_sharey=False, despine=True)
#first_sample = random.sample(range(0,30000), 1000)
#second_sample = random.sample(range(30000,60000), 1000)
first_sample = range(0,30000)
second_sample = range(30000,60000)
combined_sample = np.concatenate((first_sample,second_sample),axis=0)
g = sns.PairGrid(samples_df_combined.iloc[combined_sample,parameters_to_plot], hue="code", corner=True, diag_sharey=False)
g.map_lower(sns.kdeplot, color=sns.color_palette()[9], fill=False)
g.map_upper(sns.kdeplot, color=sns.color_palette()[6], fill=False)
g.map_diag(sns.kdeplot, linewidth=.5, fill=True, color=sns.color_palette()[3])
print(parameters_to_plot[:-1])
for n,i in enumerate(parameters_to_plot[:-1]):
    ax=g.axes[n][n]
    #ax.axvline(x=map_parameters[i], ls='--', c=sns.color_palette()[9], label='MAP')

#for i, ax in enumerate(g.axes[-1:]):
#    if i << 5:
#        label = label_list[i] #ax.xaxis.get_label_text()
#        g.axes[len(parameters_to_plot)-2,i].xaxis.set_label_text(param_dict[label], fontsize = 14, visible=True)
#        g.axes[i,0].yaxis.set_label_text(param_dict[label], fontsize = 14, visible=True)

for i, ax in enumerate(g.axes[-1,:]):
    label = ax.xaxis.get_label_text()
    #print(i,label)
    #ax.xaxis.set_label_text("test label")
    g.axes[len(parameters_to_plot)-2,i].xaxis.set_label_text(param_dict[label], fontsize = 14, visible=True)
    g.axes[i,0].yaxis.set_label_text(param_dict[label], fontsize = 14, visible=True)
g = g.add_legend(loc='upper right', fontsize=36)
plt.tight_layout()
plt.savefig('Plots/Corner_plot_AuAu_20_obs_rapidity_loss_bulk_viscosity_random_' + mcmc_run_settings)
#plt.savefig('Plots/Corner_plot_AuAu_20_obs_shear_viscosity_random_' + mcmc_run_settings)
plt.show()
"""


# Testing the posterior samples are within the parameter bounds (larger than 0)
#print(dataframe.iloc[:,[0,1,2]][dataframe[0] < 0.01])
#print(dataframe.iloc[560,[0,1,2]])

# Define grid-wise functions to calculate parameters across a range
def y_loss(y_init, ylossparam4at2, ylossparam4at4, ylossparam4at6):
    y_loss = 0;
    y_loss1 = ylossparam4at2
    y_loss2 = ylossparam4at4
    y_loss3 = ylossparam4at6

    if (y_init <= 2):
        y_loss = y_loss1/2.*y_init
    elif (y_init <= 4):# & (y_init > 2):
        y_loss = (y_loss2 - y_loss1)/2.*y_init +(2.*y_loss1 - y_loss2); #y_loss1
    elif (y_init <= 6):# & (y_init > 4):
        y_loss = (y_loss3 - y_loss2)/2.*y_init + (3.*y_loss2 - 2.*y_loss3); #y_loss2
    return(y_loss)
y_loss = np.vectorize(y_loss)

def zeta_over_s(T, zmax, T0, width, asym):
    DeltaT = T - T0
    sign = 1 if DeltaT>0 else -1
    x = DeltaT/(width*(1.+asym*sign))
    return zmax/(1.+x**2)
zeta_over_s = np.vectorize(zeta_over_s)

def eta_over_s(T, T_k, alow, ahigh, etas_k):
    if T < T_k:
        y = etas_k + alow*(T-T_k)
    else:
        y = etas_k + ahigh*(T-T_k)
    if y > 0:
        return y
    else:
        return 0.
eta_over_s = np.vectorize(eta_over_s)

# Define (hard-coded) the min and max of the prior ranges #6.0e-03
design_min_MCMC = np.array([ 2.0e-03,  4.0e-03,  6.0e-03,  1.0e-03,  1.0e-03,  1.0e-03,
        2.0e-01,  2.0e+00,  1.0e-01,  1.0e-01,  1.0e-03,  1.3e-01,
       -2.0e+00, -1.0e+00,  1.0e-02,  1.0e-02,  1.2e-01,  2.5e-02,
       -8.0e-01,  1.0e-01])
design_max_MCMC = np.array([ 2.  ,  4.  ,  6.  ,  1.  ,  1.  ,  1.  ,  1.  , 25.  ,  0.5 ,
        0.8 ,  1.  ,  0.3 ,  1.  ,  2.  ,  0.2 ,  0.2 ,  0.3 ,  0.15,
        0.6 ,  0.6 ])


# Define truth parameters for closure test
truth = np.array([ 0.826  ,  1.484  ,  4.206  ,  0.849  ,  0.223  ,  0.671  ,
        0.5816 , 10.073  ,  0.4516 ,  0.2239 ,  0.741  ,  0.21925,
       -0.473  ,  1.841  ,  0.05769,  0.15041,  0.29874,  0.07287,
       -0.471  ,  0.2055 ])

truth_pt_2 = np.array([ 1.254  ,  1.82   ,  1.842  ,  0.073  ,  0.325  ,  0.139  ,
        0.4664 , 17.111  ,  0.33   ,  0.6229 ,  0.833  ,  0.18355,
       -1.679  ,  0.503  ,  0.16181,  0.19107,  0.14394,  0.14988,
        0.383  ,  0.3305 ])

"""
# Rapidity Loss

per5_QM_y_loss = np.array([0.        , 0.00179763, 0.00359527, 0.0053929 , 0.00719053,
       0.00898816, 0.0107858 , 0.01258343, 0.01438106, 0.0161787 ,
       0.01797633, 0.01977396, 0.02157159, 0.02336923, 0.02516686,
       0.02696449, 0.02876213, 0.03055976, 0.03235739, 0.03415502,
       0.03595266, 0.03775029, 0.03954792, 0.04134556, 0.04314319,
       0.04494082, 0.04673845, 0.04853609, 0.05033372, 0.05213135,
       0.05392899, 0.05572662, 0.05752425, 0.05932188, 0.09087858,
       0.11627919, 0.13294004, 0.14528536, 0.15924247, 0.16940338,
       0.1789056 , 0.18660685, 0.19173934, 0.19835767, 0.20292226,
       0.20995063, 0.21495789, 0.2171242 , 0.21778017, 0.21977226,
       0.21861797, 0.21783848, 0.21934523, 0.21679398, 0.21705616,
       0.21242996, 0.20768864, 0.20233751, 0.1947762 , 0.18517514,
       0.17558039, 0.163216  , 0.15089818, 0.13439864, 0.11387797,
       0.08789326, 0.06506311, 0.15206535, 0.23901836, 0.32404904,
       0.40914507, 0.49456294, 0.57940324, 0.6597558 , 0.73963104,
       0.81835029, 0.89573688, 0.97279246, 1.04698887, 1.12090001,
       1.18774943, 1.2485514 , 1.29701942, 1.32280457, 1.32817985,
       1.30735622, 1.27076063, 1.23413789, 1.18788496, 1.13867467,
       1.08403996, 1.02774462, 0.97636779, 0.91761214, 0.86233582,
       0.80625899, 0.74342282, 0.68701898, 0.63319038, 0.57890913])

per95_QM_y_loss = np.array([0.        , 0.05673233, 0.11346467, 0.170197  , 0.22692934,
       0.28366167, 0.340394  , 0.39712634, 0.45385867, 0.51059101,
       0.56732334, 0.62405567, 0.68078801, 0.73752034, 0.79425267,
       0.85098501, 0.90771734, 0.96444968, 1.02118201, 1.07791434,
       1.13464668, 1.19137901, 1.24811135, 1.30484368, 1.36157601,
       1.41830835, 1.47504068, 1.53177302, 1.58850535, 1.64523768,
       1.70197002, 1.75870235, 1.81543468, 1.87216702, 1.84369203,
       1.8230823 , 1.80097414, 1.77713441, 1.76951352, 1.76410133,
       1.76091344, 1.7651559 , 1.77522866, 1.78679568, 1.79946444,
       1.81145803, 1.82860665, 1.8391645 , 1.8571325 , 1.87929792,
       1.90219518, 1.92668768, 1.95798035, 1.98750792, 2.02089045,
       2.05677505, 2.08586635, 2.1202645 , 2.15565939, 2.19512801,
       2.23543355, 2.27676704, 2.32129251, 2.36668992, 2.41603159,
       2.46356644, 2.51408776, 2.45748413, 2.40688884, 2.35259445,
       2.30094242, 2.24933074, 2.19646777, 2.14718351, 2.10346156,
       2.05408889, 2.01059854, 1.96920988, 1.92980903, 1.89314906,
       1.86431495, 1.8396662 , 1.82489271, 1.84136793, 1.86823773,
       1.91779191, 1.98149209, 2.05242845, 2.13121037, 2.21293078,
       2.29618796, 2.37838231, 2.46404027, 2.55194787, 2.63453859,
       2.71935135, 2.80815272, 2.89412102, 2.9802956 , 3.06914969])

per5_val_pt_2_y_loss = np.array([0.        , 0.0057209 , 0.0114418 , 0.0171627 , 0.02288359,
       0.02860449, 0.03432539, 0.04004629, 0.04576719, 0.05148809,
       0.05720898, 0.06292988, 0.06865078, 0.07437168, 0.08009258,
       0.08581348, 0.09153438, 0.09725527, 0.10297617, 0.10869707,
       0.11441797, 0.12013887, 0.12585977, 0.13158066, 0.13730156,
       0.14302246, 0.14874336, 0.15446426, 0.16018516, 0.16590606,
       0.17162695, 0.17734785, 0.18306875, 0.18878965, 0.22236374,
       0.25542604, 0.28440645, 0.33202565, 0.36500074, 0.39995705,
       0.41660418, 0.41942524, 0.45241207, 0.46136442, 0.47041601,
       0.4780022 , 0.47831658, 0.4865567 , 0.49585517, 0.50438041,
       0.51200694, 0.52171969, 0.52567023, 0.52309456, 0.52400766,
       0.52858113, 0.51385136, 0.49691867, 0.48604467, 0.48074458,
       0.47418026, 0.455058  , 0.42525616, 0.40224008, 0.39336037,
       0.36841174, 0.32957789, 0.42296371, 0.5168747 , 0.61195429,
       0.69653475, 0.77302257, 0.85157057, 0.93034492, 1.01045233,
       1.09049408, 1.16614753, 1.244036  , 1.32367832, 1.37592035,
       1.44276409, 1.48696111, 1.49848615, 1.53223596, 1.53072022,
       1.53931648, 1.53013798, 1.51305492, 1.50072395, 1.47282255,
       1.46155639, 1.43619583, 1.40689007, 1.38445437, 1.35615315,
       1.33129523, 1.30687198, 1.2805061 , 1.25899273, 1.23461052])
per95_val_pt_2_y_loss = np.array([0.        , 0.05569235, 0.1113847 , 0.16707704, 0.22276939,
       0.27846174, 0.33415409, 0.38984644, 0.44553878, 0.50123113,
       0.55692348, 0.61261583, 0.66830818, 0.72400052, 0.77969287,
       0.83538522, 0.89107757, 0.94676992, 1.00246227, 1.05815461,
       1.11384696, 1.16953931, 1.22523166, 1.28092401, 1.33661635,
       1.3923087 , 1.44800105, 1.5036934 , 1.55938575, 1.61507809,
       1.67077044, 1.72646279, 1.78215514, 1.83784749, 1.84436823,
       1.80956522, 1.78825586, 1.76382674, 1.75816543, 1.747864  ,
       1.74155316, 1.74128056, 1.7710177 , 1.78242927, 1.78153776,
       1.81449067, 1.82514808, 1.84312721, 1.85701493, 1.86837372,
       1.86937837, 1.89027482, 1.91329709, 1.92945587, 1.94828209,
       1.99765662, 2.00829856, 2.01933361, 2.04580906, 2.07490697,
       2.12667743, 2.14863025, 2.20622238, 2.2737634 , 2.32971067,
       2.39366906, 2.42884686, 2.39704372, 2.36419993, 2.33296376,
       2.30613629, 2.29465773, 2.27929214, 2.26234397, 2.25163   ,
       2.239341  , 2.21145043, 2.21060665, 2.21704788, 2.2081956 ,
       2.19818559, 2.20780683, 2.21288265, 2.25479981, 2.2833705 ,
       2.33399575, 2.3799946 , 2.44296304, 2.50103962, 2.56162807,
       2.62136621, 2.6913585 , 2.75272935, 2.82207599, 2.90001166,
       2.98806425, 3.0755014 , 3.1604203 , 3.23814714, 3.31574441])

per5_QM_y_loss_AuAu = np.array([0.0, 0.00336, 0.00671, 0.01007, 0.01343, 0.01678, 0.02014, 0.0235, 0.02686, 0.03021, 0.03357, 0.03693, 0.04028, 0.04364, 0.047, 0.05035, 0.05371, 0.05707, 0.06043, 0.06378, 0.06714, 0.0705, 0.07385, 0.07721, 0.08057, 0.08392, 0.08728, 0.09064, 0.094, 0.09735, 0.10071, 0.10407, 0.10742, 0.11078, 0.15371, 0.16692, 0.17085, 0.17738, 0.17947, 0.17995, 0.18203, 0.18741, 0.19169, 0.19436, 0.19252, 0.19171, 0.19219, 0.19299, 0.18886, 0.1881, 0.18604, 0.1843, 0.17897, 0.17472, 0.17335, 0.16823, 0.16083, 0.15044, 0.14407, 0.13598, 0.1281, 0.11999, 0.10956, 0.09824, 0.08156, 0.05856, 0.02874, 0.1353, 0.23961, 0.33689, 0.43061, 0.5223, 0.61376, 0.70559, 0.79221, 0.87567, 0.96091, 1.04717, 1.12993, 1.20948, 1.29094, 1.36615, 1.42718, 1.4617, 1.46414, 1.40404, 1.3255, 1.2338, 1.13957, 1.04807, 0.95827, 0.86756, 0.77464, 0.67459, 0.57611, 0.47419, 0.37186, 0.2687, 0.16234, 0.06119])
per95_QM_y_loss_AuAu = np.array([0.0, 0.0576, 0.1152, 0.17279, 0.23039, 0.28799, 0.34559, 0.40318, 0.46078, 0.51838, 0.57598, 0.63358, 0.69117, 0.74877, 0.80637, 0.86397, 0.92157, 0.97916, 1.03676, 1.09436, 1.15196, 1.20955, 1.26715, 1.32475, 1.38235, 1.43995, 1.49754, 1.55514, 1.61274, 1.67034, 1.72793, 1.78553, 1.84313, 1.90073, 1.87209, 1.85722, 1.82769, 1.83578, 1.86284, 1.89289, 1.93189, 1.97465, 2.02193, 2.07728, 2.12909, 2.18133, 2.23883, 2.29409, 2.36443, 2.43721, 2.49776, 2.56695, 2.63219, 2.69328, 2.7607, 2.83989, 2.92072, 3.00675, 3.09984, 3.18002, 3.26781, 3.34405, 3.42475, 3.51689, 3.60195, 3.69221, 3.78295, 3.67564, 3.57054, 3.4649, 3.35669, 3.25129, 3.14491, 3.04572, 2.95174, 2.85206, 2.75302, 2.66465, 2.58145, 2.5284, 2.50932, 2.52018, 2.55092, 2.59362, 2.64614, 2.70692, 2.77898, 2.84995, 2.94952, 3.04075, 3.15054, 3.26151, 3.37161, 3.48912, 3.60464, 3.72433, 3.84072, 3.95933, 4.07986, 4.19808])

y_init = np.linspace(0, 6, 100)
fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(8,6),
                         sharex=False, sharey=False, constrained_layout=True)
fig.suptitle("Rapidity loss posterior", family = "serif", wrap=True, fontsize =20)

# True Rapidity Loss for closure test
#[ylossparam4at2, ylossparam4at4, ylossparam4at6] = truth_pt_2[[0,1,2]]
#true_y_loss = y_loss(y_init, ylossparam4at2, ylossparam4at4, ylossparam4at6)

# Prior
prior_y = []
for row in np.random.uniform(design_min_MCMC, design_max_MCMC,(10000,20))[:,[0,1,2]]:
    [ylossparam4at2, ylossparam4at4, ylossparam4at6] = row
    prior=[]
    for y in y_init:
        prior.append(y_loss(y,ylossparam4at2, ylossparam4at4, ylossparam4at6))
    prior_y.append(prior)
per0_pr,per5_pr,per20_pr,per80_pr,per95_pr,per100_pr=np.percentile(prior_y,[0,5,20,80,95,100], axis=0)

# Posterior
posterior_y = []
for row in dataframe.iloc[0:n_samples_posterior:prune,[0,1,2]].values:
    [ylossparam4at2, ylossparam4at4, ylossparam4at6] = row
    posterior=[]
    for y in y_init:
        posterior.append(y_loss(y,ylossparam4at2, ylossparam4at4, ylossparam4at6))
    posterior_y.append(posterior)

per0,per5,per20,per80,per95,per100=np.percentile(posterior_y,[0,5,20,80,95,100], axis=0)
axes.fill_between(y_init, per5_pr,per95_pr,color=sns.color_palette()[2], alpha=0.15, label='90% C.I. Prior')
axes.fill_between(y_init,per5_QM_y_loss_AuAu,per95_QM_y_loss_AuAu,color=sns.color_palette()[1], alpha=0.25, label='90% C.I. Andi')
#axes.fill_between(y_init,per20,per80, color=sns.color_palette()[1], alpha=0.3, label='60% C.I.')
#axes.plot(y_init, true_y_loss, color = 'limegreen', label = 'Truth', linewidth=5)
plt.plot(y_init,per5,'--b', linewidth = 6, label = "90% C.I. Matt's code")
plt.plot(y_init,per95,'--b',linewidth = 6)
#axes.plot(y_init, true_y_loss, color = 'limegreen', label = 'Truth', linewidth=5)

axes.legend(loc='upper left', fontsize=20)
axes.set_xlim(0,6)
axes.set_ylim(0,5)
axes.tick_params(axis='both', which='major', labelsize=17)
axes.set_xlabel('$y_{init}$', fontsize = 22)
axes.set_ylabel('$y_{loss}$', fontsize = 26)
plt.savefig('Plots/Rapidity_Loss_Posterior_' + mcmc_run_settings)
"""

"""
# Shear Viscosity

per5_QM_shear = np.array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])

per95_QM_shear = np.array([0.27363092, 0.26998197, 0.26680038, 0.2626439 , 0.25780154,
       0.2543569 , 0.25042428, 0.24759563, 0.24427731, 0.24053025,
       0.23715072, 0.23285635, 0.22893305, 0.22476088, 0.22179316,
       0.21937326, 0.217224  , 0.21534185, 0.21320134, 0.21144999,
       0.20976995, 0.20919427, 0.20852539, 0.2082767 , 0.20943981,
       0.209393  , 0.20890102, 0.20965827, 0.21113234, 0.2118068 ,
       0.21264842, 0.21320078, 0.2140558 , 0.21542559, 0.21553006,
       0.21756119, 0.21957522, 0.21991444, 0.22126122, 0.22290582,
       0.22539408, 0.22889682, 0.23140362, 0.23321885, 0.23591454,
       0.2381241 , 0.24116805, 0.24459606, 0.24797473, 0.25118759,
       0.25457228, 0.25618798, 0.26087492, 0.26457934, 0.26913835,
       0.27375804, 0.27841635, 0.28307546, 0.28810384, 0.29287993,
       0.29747942, 0.30237633, 0.30705182, 0.31145764, 0.3161493 ,
       0.3217173 , 0.32645782, 0.33093725, 0.3362608 , 0.34140413,
       0.34568051, 0.3503413 , 0.3551819 , 0.36032035, 0.36516745,
       0.36954165, 0.37461528, 0.37846961, 0.38367644, 0.38866751,
       0.39341855, 0.39892946, 0.40397411, 0.40960483, 0.41510996,
       0.42037061, 0.42565342, 0.43034554, 0.43539658, 0.44052659,
       0.44582214, 0.45047059, 0.45524013, 0.4603118 , 0.46504153,
       0.46973548, 0.47453625, 0.47930296, 0.48423963, 0.48931959])

per5_val_pt_2_shear = np.array([0.04318273, 0.0432934 , 0.04368163, 0.04452081, 0.04620264,
       0.04637485, 0.04594217, 0.04565978, 0.04601931, 0.04761559,
       0.04993655, 0.05225751, 0.05353935, 0.0527597 , 0.05212257,
       0.05036954, 0.04950307, 0.05084189, 0.05371136, 0.05290904,
       0.05274055, 0.05528084, 0.05504814, 0.05494838, 0.05337311,
       0.05260018, 0.04995369, 0.05082565, 0.05366818, 0.05418456,
       0.05332407, 0.05105426, 0.05383058, 0.05543173, 0.05285786,
       0.05028398, 0.04771011, 0.04675988, 0.04360713, 0.04124812,
       0.04184611, 0.0397481 , 0.03795997, 0.03671113, 0.03778628,
       0.03742056, 0.03692149, 0.03627225, 0.03558045, 0.03501202,
       0.0344436 , 0.03388458, 0.03342157, 0.0332797 , 0.03472405,
       0.03450643, 0.0334341 , 0.03236177, 0.0300761 , 0.03024767,
       0.03050368, 0.02838176, 0.02777673, 0.0262171 , 0.02636235,
       0.02365731, 0.02197557, 0.02098801, 0.02021172, 0.01918438,
       0.01815705, 0.01824956, 0.01817737, 0.01610196, 0.01557794,
       0.01526695, 0.0132018 , 0.01142245, 0.00935116, 0.00824217,
       0.00704229, 0.00459016, 0.00184112, 0.        , 0.        ,
       0.        , 0.        , 0.        , 0.        , 0.        ,
       0.        , 0.        , 0.        , 0.        , 0.        ,
       0.        , 0.        , 0.        , 0.        , 0.        ])

per95_val_pt_2_shear = np.array([0.4072597 , 0.40135467, 0.39544963, 0.38954459, 0.38363956,
       0.3778244 , 0.37246936, 0.36711432, 0.36175927, 0.35640423,
       0.35104919, 0.34569415, 0.3403391 , 0.33498406, 0.32962902,
       0.32577413, 0.32195611, 0.3181381 , 0.31430818, 0.31046358,
       0.30661898, 0.30277439, 0.29892979, 0.29406185, 0.28858169,
       0.28439591, 0.2810646 , 0.2756502 , 0.27014252, 0.26625178,
       0.26170764, 0.25670137, 0.25712231, 0.25229168, 0.25132964,
       0.24601508, 0.24539642, 0.24525873, 0.25028987, 0.24950572,
       0.247529  , 0.24942233, 0.254543  , 0.25966368, 0.26442942,
       0.2682109 , 0.27227379, 0.27325034, 0.27294929, 0.27442203,
       0.2789064 , 0.28038824, 0.28430662, 0.28927828, 0.29498142,
       0.30068455, 0.30638768, 0.31209082, 0.31779395, 0.32349709,
       0.32918647, 0.33428383, 0.33898752, 0.34474781, 0.3505014 ,
       0.35624318, 0.36144349, 0.36662105, 0.37178073, 0.37694042,
       0.3821001 , 0.38725719, 0.39223899, 0.39722078, 0.40220258,
       0.40718437, 0.41216617, 0.41714797, 0.42212976, 0.42711156,
       0.4320534 , 0.4369868 , 0.44141823, 0.44565848, 0.44989872,
       0.45413896, 0.45837921, 0.46261945, 0.46685969, 0.47109993,
       0.47534018, 0.47958042, 0.48382066, 0.48806091, 0.49230115,
       0.49653153, 0.50072818, 0.50492483, 0.50912147, 0.51331812])

per5_QM_shear_AuAu = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3e-05, 0.00136, 0.00205, 0.00254, 0.00233, 0.00272, 0.00258, 0.00297, 0.00303, 0.0027, 0.00192, 0.00145, 0.00142, 0.0009, 0.00023, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
per95_QM_shear_AuAu = np.array([0.28944, 0.28477, 0.28023, 0.27543, 0.27147, 0.26616, 0.26158, 0.25735, 0.253, 0.24862, 0.24405, 0.23895, 0.23429, 0.22965, 0.22478, 0.22069, 0.21619, 0.21223, 0.2085, 0.20475, 0.20149, 0.19824, 0.19473, 0.19215, 0.19007, 0.18765, 0.18624, 0.18548, 0.18405, 0.18293, 0.18299, 0.18306, 0.1836, 0.18378, 0.18423, 0.18614, 0.18725, 0.18881, 0.19082, 0.19345, 0.19462, 0.19688, 0.19914, 0.20269, 0.20655, 0.21036, 0.21296, 0.21687, 0.22035, 0.22518, 0.23029, 0.23493, 0.23969, 0.24431, 0.24923, 0.25389, 0.25889, 0.26392, 0.26905, 0.27352, 0.27881, 0.28386, 0.28865, 0.29369, 0.29919, 0.30433, 0.30911, 0.3145, 0.31954, 0.32466, 0.32907, 0.33451, 0.33959, 0.34493, 0.34958, 0.35438, 0.35953, 0.3645, 0.36967, 0.37501, 0.38044, 0.38575, 0.3912, 0.39653, 0.40185, 0.40728, 0.41247, 0.41795, 0.42329, 0.4284, 0.43344, 0.43861, 0.44379, 0.44911, 0.45467, 0.45992, 0.46508, 0.47021, 0.47563, 0.48132])

Tt = np.linspace(0.1, 0.4, 100)
fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(8,6),
                         sharex=False, sharey=False, constrained_layout=True)
fig.suptitle("Specific shear viscosity posterior", family = "serif", wrap=True, fontsize=20)

# True Shear Viscosity T dependence for closure test
#[T_k, alow, ahigh, etas_k] = truth_pt_2[[11,12,13,14]]
#true_shear = eta_over_s(Tt, T_k, alow, ahigh, etas_k)

# Prior
prior_etas = []
for row in np.random.uniform(design_min_MCMC, design_max_MCMC,(10000,20))[:,[11,12,13,14]]:
    [T_k, alow, ahigh, etas_k] = row
    prior=[]
    for T in Tt:
        prior.append(eta_over_s(T,T_k,alow,ahigh,etas_k))
    prior_etas.append(prior)
per0_pr,per5_pr,per20_pr,per80_pr,per95_pr,per100_pr=np.percentile(prior_etas,[0,5,20,80,95,100], axis=0)

# Posterior
posterior_etas = []
for row in dataframe.iloc[0:n_samples_posterior:prune,[11,12,13,14]].values:
    [T_k, alow, ahigh, etas_k] = row
    posterior=[]
    for T in Tt:
        posterior.append(eta_over_s(T,T_k,alow,ahigh,etas_k))
    posterior_etas.append(posterior)
per0,per5,per20,per80,per95,per100=np.percentile(posterior_etas,[0,5,20,80,95,100], axis=0)
axes.fill_between(Tt, per5_pr,per95_pr,color=sns.color_palette()[7], alpha=0.6, label='90% Prior')
axes.fill_between(Tt,per5_QM_shear_AuAu,per95_QM_shear_AuAu,color=sns.color_palette()[6], alpha=0.3, label='90% C.I. Andi')
#axes.fill_between(Tt,per20,per80, color=sns.color_palette()[6], alpha=0.3, label='60% C.I.')
#axes.plot(Tt, true_shear, color = 'r', label = 'Truth', linewidth=5)
plt.plot(Tt,per5,'--b', linewidth = 6, label = "90% C.I. Matt's code")
plt.plot(Tt,per95,'--b',linewidth = 6)
#print(per5)
#print(per95)
#axes.plot(Tt, true_shear, color = 'r', label = 'Truth', linewidth=5)

axes.legend(loc='upper left', fontsize =20)
plt.xlim(.1,.4)
plt.ylim(0,.5)
axes.tick_params(axis='both', which='major', labelsize=17)
axes.set_xlabel('T [GeV]', fontsize =15)
axes.set_ylabel('$\eta/s$', fontsize =25)
plt.savefig('Plots/Shear_Viscosity_Posterior_' + mcmc_run_settings)
"""

#"""
# Bulk Viscosity


per5_QM_bulk = np.array([0.04627864, 0.04858364, 0.05109753, 0.05376471, 0.05667867,
       0.05981109, 0.0632183 , 0.06689071, 0.07027542, 0.07413368,
       0.07823758, 0.08247657, 0.08649231, 0.09070489, 0.09584529,
       0.10026414, 0.10528514, 0.10910203, 0.11376814, 0.11874115,
       0.12401023, 0.12860407, 0.132885  , 0.13682909, 0.13999767,
       0.14266211, 0.14537928, 0.1472927 , 0.14827015, 0.14777471,
       0.14678838, 0.14586803, 0.14303907, 0.13868382, 0.13340508,
       0.1262695 , 0.11882742, 0.11061879, 0.1000024 , 0.09024121,
       0.08257338, 0.07476982, 0.06809388, 0.06121297, 0.05446257,
       0.04905208, 0.04392536, 0.03944606, 0.03570698, 0.03254457,
       0.02974057, 0.02711042, 0.02501991, 0.02296255, 0.0212097 ,
       0.01964546, 0.01826289, 0.01691357, 0.01582397, 0.01475315,
       0.01377   , 0.01294224, 0.0121291 , 0.01144963, 0.01079432,
       0.01016962, 0.00958834, 0.00907922, 0.00857144, 0.00814821,
       0.00774901, 0.00737284, 0.00698094, 0.00667379, 0.00637906,
       0.00607694, 0.00583029, 0.00556358, 0.0053351 , 0.00511442,
       0.00492502, 0.00474628, 0.00456424, 0.00436142, 0.00418954,
       0.00403688, 0.00389141, 0.00375531, 0.00361176, 0.00348534,
       0.00337338, 0.00326698, 0.00316436, 0.00306753, 0.00297296,
       0.00288512, 0.00280132, 0.00271843, 0.00264216, 0.00256461])
per95_QM_bulk = np.array([0.16887151, 0.17073231, 0.17276956, 0.17490492, 0.17676462,
       0.1789438 , 0.18074578, 0.18255575, 0.1843904 , 0.18608738,
       0.18739745, 0.18894157, 0.18997704, 0.19109093, 0.19198663,
       0.19287667, 0.19356084, 0.1942813 , 0.19475864, 0.19520185,
       0.1955608 , 0.19593644, 0.1962665 , 0.19663932, 0.19700656,
       0.19721339, 0.19737426, 0.1975845 , 0.19771463, 0.19775612,
       0.19775804, 0.19776502, 0.19784039, 0.19776159, 0.19748648,
       0.19719878, 0.19676366, 0.19628172, 0.19590057, 0.19555844,
       0.19489849, 0.19440641, 0.19365998, 0.19235379, 0.19105276,
       0.18976113, 0.18810348, 0.18666277, 0.1847671 , 0.182801  ,
       0.18092048, 0.17840402, 0.17641479, 0.17406568, 0.17217154,
       0.16885967, 0.16613023, 0.16377596, 0.16104484, 0.15869082,
       0.1560635 , 0.15315991, 0.15080654, 0.14833539, 0.14584348,
       0.14340864, 0.1408696 , 0.13847192, 0.13554384, 0.13331032,
       0.1304899 , 0.12806082, 0.12578182, 0.12350737, 0.12123605,
       0.11925945, 0.11735309, 0.11528835, 0.11309078, 0.1110863 ,
       0.10915774, 0.10720829, 0.10541359, 0.10346064, 0.10172771,
       0.09995748, 0.09808501, 0.0963224 , 0.09451958, 0.09284338,
       0.09121297, 0.08953976, 0.08797232, 0.08647554, 0.08498259,
       0.0835507 , 0.08217109, 0.08064725, 0.07935553, 0.07802564])


per5_val_pt_2_bulk = np.array([0.0205084 , 0.02320907, 0.02489937, 0.02613937, 0.02842388,
       0.03051998, 0.03179928, 0.03335266, 0.03613077, 0.03765857,
       0.04181699, 0.04502693, 0.04927148, 0.05109549, 0.055832  ,
       0.05927392, 0.06169625, 0.06577189, 0.06700883, 0.0737279 ,
       0.0791702 , 0.0797327 , 0.08073529, 0.08195669, 0.08230283,
       0.08417243, 0.08571024, 0.08647923, 0.08748871, 0.0868991 ,
       0.08803562, 0.08637245, 0.0815139 , 0.07961034, 0.0775568 ,
       0.07395354, 0.06915745, 0.06442215, 0.06012017, 0.05370701,
       0.0492623 , 0.04540096, 0.0409471 , 0.03757771, 0.03443523,
       0.03159271, 0.0288966 , 0.02613505, 0.02428535, 0.02223316,
       0.02070815, 0.01930052, 0.01813871, 0.01727887, 0.01633   ,
       0.01525696, 0.01427441, 0.01364471, 0.01273189, 0.01190591,
       0.0111595 , 0.010575  , 0.01003536, 0.00953604, 0.00907235,
       0.00854822, 0.00794623, 0.00755154, 0.00718493, 0.00684384,
       0.00652602, 0.00622942, 0.00595416, 0.00569683, 0.00545557,
       0.00522909, 0.00501623, 0.0048257 , 0.00465641, 0.00449579,
       0.00429674, 0.00411527, 0.00396091, 0.00381554, 0.00368157,
       0.00355539, 0.00343554, 0.00332162, 0.00321471, 0.00313941,
       0.0030667 , 0.00299645, 0.00292857, 0.00286294, 0.00279947,
       0.00273807, 0.00265964, 0.00257972, 0.00250334, 0.00243029])

per95_val_pt_2_bulk = np.array([0.14841718, 0.15228237, 0.15563559, 0.15741852, 0.15953256,
       0.16477033, 0.16677649, 0.16857719, 0.17094823, 0.17345756,
       0.17477985, 0.1766479 , 0.1798536 , 0.18135704, 0.18272328,
       0.18351324, 0.18503676, 0.18593954, 0.18786979, 0.1888531 ,
       0.18920518, 0.19003074, 0.19052043, 0.19034765, 0.19027724,
       0.19104476, 0.19079718, 0.19083567, 0.19196953, 0.19217501,
       0.18915163, 0.18908474, 0.18695034, 0.18625817, 0.18576959,
       0.18588487, 0.18482861, 0.18269686, 0.18248041, 0.18324043,
       0.17958475, 0.17428387, 0.17529797, 0.17489048, 0.17393297,
       0.17336484, 0.17224108, 0.17063554, 0.16856154, 0.16601667,
       0.16419914, 0.16142555, 0.15990934, 0.15726912, 0.15531614,
       0.15199804, 0.14732889, 0.14309727, 0.13939042, 0.13434664,
       0.13098357, 0.12890401, 0.12436502, 0.12069978, 0.11845056,
       0.11620071, 0.1123252 , 0.10984587, 0.10728527, 0.10508688,
       0.10318934, 0.1009924 , 0.09854305, 0.09570154, 0.09292528,
       0.0901064 , 0.08705883, 0.0847641 , 0.08231122, 0.07987522,
       0.07811877, 0.07637761, 0.07498795, 0.07340622, 0.07072537,
       0.06897118, 0.06775841, 0.06657105, 0.06540864, 0.06427074,
       0.06315689, 0.06206664, 0.06099953, 0.05995509, 0.05893289,
       0.05793245, 0.05695332, 0.05599506, 0.05504337, 0.05409702])

per5_QM_bulk_AuAu = np.array([0.01914, 0.02061, 0.02229, 0.02416, 0.0263, 0.02867, 0.03106, 0.03404, 0.03693, 0.04016, 0.0437, 0.04754, 0.05142, 0.05592, 0.0608, 0.06653, 0.07214, 0.07789, 0.083, 0.08847, 0.09454, 0.0985, 0.10146, 0.10554, 0.10906, 0.11148, 0.11354, 0.11256, 0.11232, 0.11122, 0.1098, 0.10794, 0.10204, 0.09881, 0.09232, 0.08574, 0.07971, 0.07326, 0.06746, 0.06251, 0.05668, 0.0518, 0.04715, 0.04276, 0.03887, 0.03526, 0.03177, 0.02935, 0.02705, 0.02476, 0.02281, 0.02104, 0.01969, 0.01837, 0.01692, 0.01583, 0.01471, 0.01381, 0.0128, 0.01201, 0.01141, 0.01087, 0.01004, 0.00948, 0.00908, 0.00864, 0.00818, 0.00785, 0.00754, 0.00719, 0.00685, 0.00652, 0.00613, 0.00587, 0.00562, 0.00535, 0.00516, 0.00498, 0.00477, 0.00454, 0.00436, 0.0042, 0.00405, 0.00391, 0.00378, 0.00365, 0.00353, 0.00342, 0.00331, 0.0032, 0.0031, 0.00301, 0.00292, 0.00283, 0.00275, 0.00266, 0.00259, 0.00252, 0.00245, 0.00239])
per95_QM_bulk_AuAu = np.array([0.15663, 0.15887, 0.16117, 0.1636, 0.16582, 0.16735, 0.16958, 0.17147, 0.17337, 0.17541, 0.17804, 0.17999, 0.18164, 0.18329, 0.1848, 0.18664, 0.18806, 0.1893, 0.19032, 0.19133, 0.19214, 0.19308, 0.19346, 0.19374, 0.19449, 0.19456, 0.19445, 0.1944, 0.19449, 0.19459, 0.19398, 0.19379, 0.19355, 0.19316, 0.19344, 0.19348, 0.19308, 0.19298, 0.19251, 0.19173, 0.19109, 0.19078, 0.1907, 0.1906, 0.19003, 0.1892, 0.18819, 0.18753, 0.18666, 0.18564, 0.18472, 0.18405, 0.18378, 0.18292, 0.1821, 0.17998, 0.17854, 0.17571, 0.17374, 0.17134, 0.16863, 0.16581, 0.16259, 0.16022, 0.15765, 0.15474, 0.15182, 0.14953, 0.14524, 0.14189, 0.13885, 0.13585, 0.13347, 0.13084, 0.12778, 0.12485, 0.12316, 0.12041, 0.11775, 0.11565, 0.11337, 0.11099, 0.10894, 0.10664, 0.10468, 0.1022, 0.10023, 0.09816, 0.0966, 0.09472, 0.09291, 0.0914, 0.08982, 0.08825, 0.08677, 0.0852, 0.08363, 0.08207, 0.08034, 0.07869])

Tt = np.linspace(0.1, 0.4, 100)
fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(8,6),
                         sharex=False, sharey=False, constrained_layout=True)
fig.suptitle("Specific bulk viscosity posterior", family = "serif", wrap=True, fontsize =20)

# True Bulk Viscosity T dependence for closure test
#[zmax, T0, width, asym] = truth_pt_2[[15,16,17,18]]
#true_bulk = zeta_over_s(Tt, zmax, T0, width, asym)

# Prior
prior_zetas = []

for row in np.random.uniform(design_min_MCMC, design_max_MCMC,(10000,20))[:,[15,16,17,18]]:
    [zmax, T0, width, asym] = row
    prior=[]
    for T in Tt:
        #print(T,zmax, T0, width, asym)
        prior.append(zeta_over_s(T,zmax, T0, width, asym))
    prior_zetas.append(prior)
per0_pr,per5_pr,per20_pr,per80_pr,per95_pr,per100_pr=np.percentile(prior_zetas,[0,5,20,80,95,100], axis=0)

# Posterior
posterior_zetas = []
n_sample_posterior = 6000000
prune=10
_sample = random.sample(range(0,n_samples_posterior), 60000)
#counter = 0
for row in dataframe.iloc[_sample,[15,16,17,18]].values:
    #counter+=1
    [zmax, T0, width, asym] = row
    posterior=[]
    for T in Tt:
        #print(T,zmax, T0, width, asym)
        posterior.append(zeta_over_s(T,zmax, T0, width, asym))
    posterior_zetas.append(posterior)
    #if counter in range(4000,5000):
        #plt.plot(Tt, posterior, color='r', alpha=0.1)
#print(posterior_zetas)
per0,per5,per20,per80,per95,per100=np.percentile(posterior_zetas,[0,5,20,80,95,100], axis=0)
axes.fill_between(Tt, per5_pr,per95_pr,color=sns.color_palette()[7], alpha=0.6, label='90% Prior')
#axes.fill_between(Tt,per5_QM_bulk_AuAu,per95_QM_bulk_AuAu,color=sns.color_palette()[3], alpha=0.3, label='90% C.I. Andi')
#axes.fill_between(Tt,per20,per80, color=sns.color_palette()[3], alpha=0.3, label="C.I. Matt's code")
#axes.plot(Tt, true_bulk, color = 'r', label = 'Truth', linewidth=5)
#plt.plot(Tt,per20,'--', color='cornflowerblue', linewidth = 6, label = "60% C.I. Matt's code")
#plt.plot(Tt,per80,'--', color='cornflowerblue', linewidth = 6)
plt.plot(Tt,per5,'--b', linewidth = 6, label = "90% C.I. Nominal")
plt.plot(Tt,per95,'--b',linewidth = 6)
#print(per5)
#print(per95)
#axes.plot(Tt, true_bulk, color = 'r', label = 'Truth', linewidth=5)

axes.legend(loc='upper right', fontsize =20)
#axes.set_ylim(0,1.2)
plt.xlim(.1,.4)
plt.ylim(0,.2)
axes.tick_params(axis='both', which='major', labelsize=17)
axes.set_xlabel('T [GeV]', fontsize =15)
axes.set_ylabel('$\zeta/s$', fontsize =25)
plt.savefig('Plots/Bulk_Viscosity_Posterior_' + mcmc_run_settings)
#"""
#print('Zeta max values for the first 100 samples')
#for i in range(400):



# the first entry in steps_list will be a list of the indices of all the walkers at the first MCMC chain step,
# the second entry will correspond with the second step, and so on
"""
steps_max = 15000

steps_list = []
for walker in range(steps_max): #1500
    walkers_list = []
    entry = walker
    while entry < steps_max*300: #1000000
        walkers_list.append(entry)
        entry=entry+steps_max #1500
    steps_list.append(walkers_list)

#print(dataframe.iloc[steps_list[0],[15]].values)

steps_axis = [1]
j = 250
while j<(steps_max+1):
    steps_axis.append(j)
    j+=250
print(steps_axis)

"""
"""
fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(8,6),
                         sharex=False, sharey=False, constrained_layout=True)
#steps_axis = [1,250,500,750,1000,1250,1500,1750,2000,2250,2500,2750,3000,3250,3500,3750,4000,4250,4500,4750,5000,5250,5500,5750,6000,6250,6500,6750,7000,7250,7500,7750,8000,8250,8500,8750,9000,9250,9500,9750,10000,10250,10500,10750,11000,11250,11500,11750,12000,12250,12500,12750,13000,13250,13500,13750,14000,14250,14500,14750,15000]



zeta_width_steps_per5 = []; zeta_width_steps_per95 = []
zeta_width_steps_per20 = []; zeta_width_steps_per80 = []
for i in steps_axis:
    per0,per5,per20,per80,per95,per100=np.percentile(dataframe.iloc[steps_list[i-1],[17]].values,[0,5,20,80,95,100], axis=0)
    zeta_width_steps_per5.append(float(per5)); zeta_width_steps_per95.append(float(per95));
    zeta_width_steps_per20.append(float(per20)); zeta_width_steps_per80.append(float(per80));
#print(len(steps_axis),len(zeta_max_steps_per5),len(zeta_max_steps_per95))
axes.fill_between(steps_axis,zeta_width_steps_per5,zeta_width_steps_per95,color='pink', alpha = 1, label = "90% C.I.")
#axes.plot(steps_axis,zeta_max_steps_per95,'--',color='pink')
axes.fill_between(steps_axis,zeta_width_steps_per20,zeta_width_steps_per80,color='red', alpha = 1,label = "60% C.I.")
#axes.plot(steps_axis,zeta_max_steps_per80,'--',color='red')
axes.yaxis.set_ticks_position('both')
axes.legend(loc='upper right', fontsize =20)
plt.xlim(0,15000)
plt.ylim(.025,.15)
axes.tick_params(axis='both', which='major', labelsize=17)
axes.set_xlabel('MCMC steps', fontsize =15)
axes.set_ylabel(r'$\frac{\zeta}{s}$ width', fontsize =25)
#axes.tick_params(axis='both', which='major', labelsize=15)
plt.savefig('Plots/Steps_Bulk_Viscosity_Width_Posterior' + mcmc_run_settings)


fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(8,6),
                         sharex=False, sharey=False, constrained_layout=True)
zeta_tpeak_steps_per5 = []; zeta_tpeak_steps_per95 = []
zeta_tpeak_steps_per20 = []; zeta_tpeak_steps_per80 = []
for i in steps_axis:
    per0,per5,per20,per80,per95,per100=np.percentile(dataframe.iloc[steps_list[i-1],[16]].values,[0,5,20,80,95,100], axis=0)
    zeta_tpeak_steps_per5.append(float(per5)); zeta_tpeak_steps_per95.append(float(per95));
    zeta_tpeak_steps_per20.append(float(per20)); zeta_tpeak_steps_per80.append(float(per80));
#print(len(steps_axis),len(zeta_max_steps_per5),len(zeta_max_steps_per95))
axes.fill_between(steps_axis,zeta_tpeak_steps_per5,zeta_tpeak_steps_per95,color='pink', alpha = 1, label = "90% C.I.")
#axes.plot(steps_axis,zeta_max_steps_per95,'--',color='pink')
axes.fill_between(steps_axis,zeta_tpeak_steps_per20,zeta_tpeak_steps_per80,color='red', alpha = 1,label = "60% C.I.")
#axes.plot(steps_axis,zeta_max_steps_per80,'--',color='red')
axes.yaxis.set_ticks_position('both')
axes.legend(loc='upper right', fontsize =20)
plt.xlim(0,15000)
plt.ylim(.12,.3)
axes.tick_params(axis='both', which='major', labelsize=17)
axes.set_xlabel('MCMC steps', fontsize =15)
axes.set_ylabel(r'$\frac{\zeta}{s}$ $T_{peak}$', fontsize =25)
#axes.tick_params(axis='both', which='major', labelsize=15)
plt.savefig('Plots/Steps_Bulk_Viscosity_T_Peak_Posterior' + mcmc_run_settings)
"""
"""
fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(8,6),
                         sharex=False, sharey=False, constrained_layout=True)
zeta_max_steps_per5 = []; zeta_max_steps_per95 = []
zeta_max_steps_per20 = []; zeta_max_steps_per80 = []
for i in steps_axis:
    per0,per5,per20,per80,per95,per100=np.percentile(dataframe.iloc[steps_list[i-1],[15]].values,[0,5,20,80,95,100], axis=0)
    zeta_max_steps_per5.append(float(per5)); zeta_max_steps_per95.append(float(per95));
    zeta_max_steps_per20.append(float(per20)); zeta_max_steps_per80.append(float(per80));
#print(len(steps_axis),len(zeta_max_steps_per5),len(zeta_max_steps_per95))
axes.fill_between(steps_axis,zeta_max_steps_per5,zeta_max_steps_per95,color='pink', alpha = 1, label = "90% C.I.")
#axes.plot(steps_axis,zeta_max_steps_per95,'--',color='pink')
axes.fill_between(steps_axis,zeta_max_steps_per20,zeta_max_steps_per80,color='red', alpha = 1,label = "60% C.I.")
#axes.plot(steps_axis,zeta_max_steps_per80,'--',color='red')
axes.yaxis.set_ticks_position('both')
axes.legend(loc='upper right', fontsize =20)
plt.xlim(0,15000)
plt.ylim(.01,.2)
axes.tick_params(axis='both', which='major', labelsize=17)
axes.set_xlabel('MCMC steps', fontsize =15)
axes.set_ylabel(r'$\frac{\zeta}{s}$ max', fontsize =25)
#axes.tick_params(axis='both', which='major', labelsize=15)
plt.savefig('Plots/Steps_Bulk_Viscosity_Max_Posterior' + mcmc_run_settings)




fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(8,6),
                         sharex=False, sharey=False, constrained_layout=True)
#steps_axis = [1,250,500,750,1000,1250,1500,1750,2000,2250,2500,2750,3000,3250,3500,3750,4000,4250,4500,4750,5000,5250,5500,5750,6000,6250,6500,6750,7000,7250,7500,7750,8000,8250,8500,8750,9000,9250,9500,9750,10000,10250,10500,10750,11000,11250,11500,11750,12000,12250,12500,12750,13000,13250,13500,13750,14000,14250,14500,14750,15000]
y_loss_6_steps_per5 = []; y_loss_6_steps_per95 = []
y_loss_6_steps_per20 = []; y_loss_6_steps_per80 = []
for i in steps_axis:
    per0,per5,per20,per80,per95,per100=np.percentile(dataframe.iloc[steps_list[i-1],[2]].values,[0,5,20,80,95,100], axis=0)
    y_loss_6_steps_per5.append(float(per5)); y_loss_6_steps_per95.append(float(per95));
    y_loss_6_steps_per20.append(float(per20)); y_loss_6_steps_per80.append(float(per80));
#print(len(steps_axis),len(zeta_max_steps_per5),len(zeta_max_steps_per95))
axes.fill_between(steps_axis,y_loss_6_steps_per5,y_loss_6_steps_per95,color='orange', alpha = .4, label = "90% C.I.")
#axes.plot(steps_axis,zeta_max_steps_per95,'--',color='pink')
axes.fill_between(steps_axis,y_loss_6_steps_per20,y_loss_6_steps_per80,color='darkorange', alpha = .4,label = "60% C.I.")
#axes.plot(steps_axis,zeta_max_steps_per80,'--',color='red')
axes.yaxis.set_ticks_position('both')
axes.legend(loc='upper right', fontsize =20)
plt.xlim(0,15000)
plt.ylim(0,6)
axes.tick_params(axis='both', which='major', labelsize=17)
axes.set_xlabel('MCMC steps', fontsize =15)
axes.set_ylabel('$y_{loss}$ at 6', fontsize =25)
#axes.tick_params(axis='both', which='major', labelsize=15)
plt.savefig('Plots/Steps_Rapidity_Loss_6_Posterior' + mcmc_run_settings)


fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(8,6),
                         sharex=False, sharey=False, constrained_layout=True)
#steps_axis = [1,250,500,750,1000,1250,1500,1750,2000,2250,2500,2750,3000,3250,3500,3750,4000,4250,4500,4750,5000,5250,5500,5750,6000,6250,6500,6750,7000,7250,7500,7750,8000,8250,8500,8750,9000,9250,9500,9750,10000,10250,10500,10750,11000,11250,11500,11750,12000,12250,12500,12750,13000,13250,13500,13750,14000,14250,14500,14750,15000]
y_loss_4_steps_per5 = []; y_loss_4_steps_per95 = []
y_loss_4_steps_per20 = []; y_loss_4_steps_per80 = []
for i in steps_axis:
    per0,per5,per20,per80,per95,per100=np.percentile(dataframe.iloc[steps_list[i-1],[1]].values,[0,5,20,80,95,100], axis=0)
    y_loss_4_steps_per5.append(float(per5)); y_loss_4_steps_per95.append(float(per95));
    y_loss_4_steps_per20.append(float(per20)); y_loss_4_steps_per80.append(float(per80));
#print(len(steps_axis),len(zeta_max_steps_per5),len(zeta_max_steps_per95))
axes.fill_between(steps_axis,y_loss_4_steps_per5,y_loss_4_steps_per95,color='orange', alpha = .4, label = "90% C.I.")
#axes.plot(steps_axis,zeta_max_steps_per95,'--',color='pink')
axes.fill_between(steps_axis,y_loss_4_steps_per20,y_loss_4_steps_per80,color='darkorange', alpha = .4,label = "60% C.I.")
#axes.plot(steps_axis,zeta_max_steps_per80,'--',color='red')
axes.yaxis.set_ticks_position('both')
axes.legend(loc='upper right', fontsize =20)
plt.xlim(0,15000)
plt.ylim(0,6)
axes.tick_params(axis='both', which='major', labelsize=17)
axes.set_xlabel('MCMC steps', fontsize =15)
axes.set_ylabel('$y_{loss}$ at 4', fontsize =25)
#axes.tick_params(axis='both', which='major', labelsize=15)
plt.savefig('Plots/Steps_Rapidity_Loss_4_Posterior' + mcmc_run_settings)

"""
"""
fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(8,6),
                         sharex=False, sharey=False, constrained_layout=True)
#steps_axis = [1,250,500,750,1000,1250,1500,1750,2000,2250,2500,2750,3000,3250,3500,3750,4000,4250,4500,4750,5000,5250,5500,5750,6000,6250,6500,6750,7000,7250,7500,7750,8000,8250,8500,8750,9000,9250,9500,9750,10000,10250,10500,10750,11000,11250,11500,11750,12000,12250,12500,12750,13000,13250,13500,13750,14000,14250,14500,14750,15000]
y_loss_2_steps_per5 = []; y_loss_2_steps_per95 = []
y_loss_2_steps_per20 = []; y_loss_2_steps_per80 = []
for i in steps_axis:
    per0,per5,per20,per80,per95,per100=np.percentile(dataframe.iloc[steps_list[i-1],[0]].values,[0,5,20,80,95,100], axis=0)
    y_loss_2_steps_per5.append(float(per5)); y_loss_2_steps_per95.append(float(per95));
    y_loss_2_steps_per20.append(float(per20)); y_loss_2_steps_per80.append(float(per80));
#print(len(steps_axis),len(zeta_max_steps_per5),len(zeta_max_steps_per95))
axes.fill_between(steps_axis,y_loss_2_steps_per5,y_loss_2_steps_per95,color='orange', alpha = .4, label = "90% C.I.")
#axes.plot(steps_axis,zeta_max_steps_per95,'--',color='pink')
axes.fill_between(steps_axis,y_loss_2_steps_per20,y_loss_2_steps_per80,color='darkorange', alpha = .4,label = "60% C.I.")
#axes.plot(steps_axis,zeta_max_steps_per80,'--',color='red')
axes.yaxis.set_ticks_position('both')
axes.legend(loc='upper right', fontsize =20)
plt.xlim(0,15000)
plt.ylim(0,6)
axes.tick_params(axis='both', which='major', labelsize=17)
axes.set_xlabel('MCMC steps', fontsize =15)
axes.set_ylabel('$y_{loss}$ at 2', fontsize =25)
#axes.tick_params(axis='both', which='major', labelsize=15)
plt.savefig('Plots/Steps_Rapidity_Loss_2_Posterior' + mcmc_run_settings)

"""

#plt.show()


#for i in range(1502):
    #print(data[i,15])

#walker = []
#j=0
#while j < 600000:
#    walker.append(j)
#    j=j+400


#print((dataframe.iloc[walker,[15]].values))


plt.show()

# Call plotting functions to be run
#plot_yloss()
#plt_bulk()
#plot_shear()
